<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Swifty Finch</title><description></description><link>https://swiftyfinch.github.io</link><language>ru</language><lastBuildDate>Sat, 10 May 2025 14:44:33 +0500</lastBuildDate><pubDate>Sat, 10 May 2025 14:44:33 +0500</pubDate><ttl>250</ttl><atom:link href="https://swiftyfinch.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2025-05-10-cocoapods-package</guid><title>**CocoaPods** Package üåø</title><description>Swift is evolving, and [SE-0386](https://github.com/swiftlang/swift-evolution/blob/main/proposals/0386-package-access-modifier.md) introduced **the package access modifier** for more granular control in Swift packages. While it seems designed for Swift Package Manager (**SPM**), limiting access within a package, it's not exclusive to it. Even projects using **CocoaPods** can benefit from it!</description><link>https://swiftyfinch.github.io/en/2025-05-10-cocoapods-package</link><pubDate>Sat, 10 May 2025 00:00:00 +0500</pubDate><content:encoded><![CDATA[<p>Swift is evolving, and <a href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0386-package-access-modifier.md">SE-0386</a> introduced <strong>the package access modifier</strong> for more granular control in Swift packages. While it seems designed for Swift Package Manager (<strong>SPM</strong>), limiting access within a package, it's not exclusive to it. Even projects using <strong>CocoaPods</strong> can benefit from it!</p><img src="https://swiftyfinch.github.io/posts/2025-05-10-cocoapods-package/preview.png"/><h2 id="package-name"><img class="reaction" src="https://swiftyfinch.github.io/reactions/triangular_flag.png" alt="triangular_flag.png" title="triangular_flag.png"> <a href="#package-name">The <strong>-package-name</strong> Compilation Flag</a></h2><p>If you read the proposal more closely, you'll notice that the <strong>package</strong> modifier is essentially tied to a compilation flag: <strong>-package-name</strong>. SPM automatically passes this flag with the name of the package during the build process. But here's the <strong>exciting part</strong>: this flag can be manually specified, even if you're not using SPM.</p><p>This insight opens up possibilities for using the <strong>package</strong> modifier in non-SPM setups, such as projects managed with <strong>CocoaPods</strong>. By explicitly setting the <strong>-package-name</strong> flag for multiple pods, you can simulate the behavior of a single package.</p><h2 id="usage"><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif"> <a href="#usage">Using <strong>package</strong> in CocoaPods</a></h2><p>Let's take an example where we have two pods: <strong>Saiga</strong> and <strong>WiseFields</strong>. We want to use the <strong>package</strong> modifier to share functionality between these pods while keeping the rest of the code encapsulated.</p><h3>Defining a Package-Scoped Function</h3><p>In <strong>Saiga</strong>, we define a function using the <strong>package</strong> modifier:</p><pre><code class="swift"><div class="line"><span class="keyword">package func</span> helloWorld() {</div><div class="line">    <span class="call">print</span>(<span class="string">"Hello world!"</span>)</div><div class="line">}</div></code></pre><p>This function is accessible only within the same package, as defined by the <strong>-package-name</strong> flag.</p><h3>Configuring <strong>CocoaPods</strong> Specs</h3><p>To ensure that <strong>Saiga</strong> and <strong>WiseFields</strong> are treated as part of the same package, we need to include the <strong>&#8209;package-name</strong> flag in their <strong>.podspec</strong> files. Here's how it looks:</p><h4><strong>Saiga</strong>.podspec</h4><pre><code class="ruby"><div class="line"><span class="type">Pod</span>::<span class="type">Spec</span>.<span class="property">new</span> <span class="keyword">do</span> |s|</div><div class="line">  s.<span class="property">name</span>     = <span class="string">"Saiga"</span></div><div class="line">  s.<span class="property">version</span>  = '<span class="number">1.0.0</span>'</div><div class="line">  s.<span class="property">summary</span>  = <span class="string">"none"</span></div><div class="line">  s.<span class="property">homepage</span> = <span class="string">"none"</span></div><div class="line">  s.<span class="property">author</span>   = <span class="string">"SwiftyFinch"</span></div><div class="line">  s.<span class="property">source</span>   = { :path =&gt; <span class="string">"*"</span> }</div><div class="line"></div><div class="line">  s.<span class="property">ios</span>.<span class="property">deployment_target</span> = '<span class="number">16.0</span>'</div><div class="line">  s.<span class="property">static_framework</span> = <span class="keyword">true</span></div><div class="line">  s.<span class="property">prefix_header_file</span> = <span class="keyword">false</span></div><div class="line">  s.<span class="property">source_files</span> = <span class="string">"#{s.name}/Sources/**/*.swift"</span></div><div class="line">  s.<span class="property">pod_target_xcconfig</span> = {</div><div class="line">    <span class="string">"OTHER_SWIFT_FLAGS"</span> =&gt; <span class="string">"-package-name Core"</span></div><div class="line">  }</div><div class="line">end</div></code></pre><h4><strong>WiseFields</strong>.podspec</h4><pre><code class="ruby"><div class="line"><span class="type">Pod</span>::<span class="type">Spec</span>.<span class="property">new</span> <span class="keyword">do</span> |s|</div><div class="line">  s.<span class="property">name</span>     = <span class="string">"WiseFields"</span></div><div class="line">  s.<span class="property">version</span>  = '<span class="number">1.0.0</span>'</div><div class="line">  s.<span class="property">summary</span>  = <span class="string">"none"</span></div><div class="line">  s.<span class="property">homepage</span> = <span class="string">"none"</span></div><div class="line">  s.<span class="property">author</span>   = <span class="string">"SwiftyFinch"</span></div><div class="line">  s.<span class="property">source</span>   = { :path =&gt; <span class="string">"*"</span> }</div><div class="line"></div><div class="line">  s.<span class="property">ios</span>.<span class="property">deployment_target</span> = '<span class="number">16.0</span>'</div><div class="line">  s.<span class="property">static_framework</span> = <span class="keyword">true</span></div><div class="line">  s.<span class="property">prefix_header_file</span> = <span class="keyword">false</span></div><div class="line">  s.<span class="property">source_files</span> = <span class="string">"#{s.name}/Sources/**/*.swift"</span></div><div class="line">  s.<span class="property">pod_target_xcconfig</span> = {</div><div class="line">    <span class="string">"OTHER_SWIFT_FLAGS"</span> =&gt; <span class="string">"-package-name Core"</span></div><div class="line">  }</div><div class="line">  s.<span class="property">dependency</span> <span class="string">"Saiga"</span></div><div class="line">end</div></code></pre><p>By setting <strong>-package-name Core</strong> in both podspecs, we ensure that <strong>Saiga</strong> and <strong>WiseFields</strong> belong to the same logical package.</p><h2 id="result"><img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"> <a href="#result">Accessing the <strong>helloWorld()</strong></a></h2><p>Now that both pods are part of the same package, we can call the <strong>package</strong>-scoped function from <strong>Saiga</strong>:</p><pre><code class="swift"><div class="line"><span class="keyword">import</span> Saiga</div><div class="line"></div><div class="line"><span class="call">helloWorld</span>() <span class="comment">// Output: Hello world!</span></div></code></pre><p>The function <strong>helloWorld</strong> is accessible in <strong>WiseFields</strong> because the <strong>-package-name</strong> flag unifies these modules under the same package name, even though they are managed by CocoaPods.</p><h2 id="why-this-matters"><img class="reaction" src="https://swiftyfinch.github.io/reactions/toolbox.svg" alt="toolbox.svg" title="toolbox.svg"> <a href="#why-this-matters">Why This Matters</a></h2><ul><li>The <strong>package</strong> access control modifier is a critical feature for managing <strong>core functionality</strong> across multiple modules.</li><li>It enables developers to encapsulate experimental or unstable APIs within package boundaries, ensuring they are not prematurely exposed.</li><li>This approach minimizes compatibility risks and provides the flexibility to refine functionality until it's ready for broader use.</li></ul><h2 id="conclusion"><img class="reaction" src="https://swiftyfinch.github.io/reactions/finish.svg" alt="finish.svg" title="finish.svg"> <a href="#conclusion">Conclusion</a></h2><p>The <strong>package</strong> modifier is a versatile tool that enhances modularity and API management <strong>for both SPM and CocoaPods users</strong>. By enabling <strong>safe API iteration</strong> and reducing exposure risks, it simplifies the development of robust, maintainable code. Swift's continued evolution empowers developers to build better workflows across diverse ecosystems.</p><p>You can explore this in action in <a href="https://github.com/swiftyfinch/CocoaPodsPackage/">the example project</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2023-04-22-rugby-remastered</guid><title>üèà¬†**Rugby:** Remastered</title><description>A lot of time has passed since the release of the first version of Rugby. [Last time](/en/2021-03-09-rugby-story/) I struggled with indexing at all costs. This time, I was fixing fundamental problems and got a little carried away. This is how üèà¬†[Rugby:¬†Remastered](https://github.com/swiftyfinch/Rugby) appeared.</description><link>https://swiftyfinch.github.io/en/2023-04-22-rugby-remastered</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0500</pubDate><content:encoded><![CDATA[<p>A lot of time has passed since the release of the first version of Rugby. <a href="https://swiftyfinch.github.io/en/2021-03-09-rugby-story/">Last time</a> I struggled with indexing at all costs. This time, I was fixing fundamental problems and got a little carried away. This is how üèà¬†<a href="https://github.com/swiftyfinch/Rugby">Rugby:¬†Remastered</a> appeared.</p><img src="https://swiftyfinch.github.io/posts/2023-04-22-rugby-remastered/demo.gif"/><h2 id="for_what"><img class="reaction" src="https://swiftyfinch.github.io/reactions/man_tipping_hand.png" alt="man_tipping_hand.png" title="man_tipping_hand.png"> <a href="#for_what">For What?</a></h2><p>Maybe you wonder why I needed to develop a new version. What‚Äôs wrong with the previous one? It has some <strong>fundamental drawbacks</strong> which make development pretty complicated. It is not only my opinion. I¬†had¬†some feedback from the community.</p><p>I realized that I needed to <strong>reinvent almost everything</strong>. And I did it all in one go. I thought it was better to make one major version instead of a bunch of them. But anyway, I tried to <strong>keep the known soul</strong> of Rugby and slightly embellish it.</p><h2 id="different"><img class="reaction" src="https://swiftyfinch.github.io/reactions/loupe.png" alt="loupe.png" title="loupe.png"> <a href="#different">What Makes the New Version <strong>Different</strong>?</a></h2><h4><img class="reaction" src="https://swiftyfinch.github.io/reactions/houses.png" alt="houses.png" title="houses.png"> Cache consistency</h4><p>Sometimes Rugby wasn‚Äôt rebuilding modules after changes. The issue could be solved by calling command <strong>rugby clean</strong> or passing the flag <strong>--ignore-checksums</strong>. But it was not by design and led to user‚Äôs frustration. At the same time, it used to rebuild modules too often even if it was unnecessary. I¬†challenged myself and tried to make <strong>a new better algorithm</strong> for calculating modules checksums.</p><h4><img class="reaction" src="https://swiftyfinch.github.io/reactions/spider_web.png" alt="spider_web.png" title="spider_web.png"> Cache distribution</h4><p>The previous version keeps cache in each project directory. That choice bounds Rugby development. I¬†decided to move the projects cache to <strong>one global directory</strong>. It allows <strong>reusing all binaries</strong> between any git branch or even any project. Also, it can be used as a remote cache between different Macs, including CI runners.</p><h4><img class="reaction" src="https://swiftyfinch.github.io/reactions/crystal_ball.png" alt="crystal_ball.png" title="crystal_ball.png"> W/o magic interfaces</h4><p>I received a lot of questions about Rugby commands. Some of them have bad names. Names are repeated with different results. They are unclear and have unexpected magic under the hood. I read some CLT guides and tried to <strong>make everything a bit better</strong>.</p><h4><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif"> Optimizations</h4><p>I always do experiments in my home projects. Now I‚Äôm learning async/await API, and this fact has already changed Rugby architecture. I tried to make <strong>all things targeted to concurrency</strong>. Also, I got carried away during refactoring and reinvented some Rugby parts in favour of speed.</p><h2 id="remote_cache"><img class="reaction" src="https://swiftyfinch.github.io/reactions/whale.png" alt="whale.png" title="whale.png"> <a href="#remote_cache">Remote Cache</a></h2><p>All these changes opened the way to the implementation of <a href="https://github.com/swiftyfinch/Rugby/blob/main/docs/remote-cache.md">remote cache</a>. The basic command works with AWS S3, but Rugby interfaces allow you to configure <strong>uploading and downloading for any cloud storage</strong>.</p><p>This approach can seriously <strong>reduce the total building time of the entire team</strong> both on personal Macs and when launching CI/CD pipelines. However, it is worth paying attention to optimizing the download speed from the selected cloud storage.</p><h2 id="roadmap"><img class="reaction" src="https://swiftyfinch.github.io/reactions/triangular_flag.png" alt="triangular_flag.png" title="triangular_flag.png"> <a href="#roadmap">Roadmap</a></h2><p>What's next? I'm going to <strong>refactor</strong> some parts of the codebase. Then I will write more <strong>tests</strong>, including unit ones, which were absent in the first version. After that, I will prepare the <strong>documentation</strong>, set up the necessary pipelines and be ready for the release of the <strong>open-source</strong> version. <img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"></p><h2 id="conclusion"><img class="reaction" src="https://swiftyfinch.github.io/reactions/finish.svg" alt="finish.svg" title="finish.svg"> <a href="#conclusion">Conclusion</a></h2><p><a href="https://github.com/swiftyfinch/Rugby">The new version of Rugby</a> üèà not only struggles with indexing, but can also seriously <strong>reduce the build process time</strong>. After redesigning the interface, it has become <strong>easier to use</strong>. And some of the steps in the commands have <strong>sped up</strong>.</p><p>At the same time, the source code was rewritten to a new architecture, which in my opinion, will be <strong>more understandable to everyone</strong>. I hope that soon, I will open the source code, and it will be easier for the community to <strong>develop and support Rugby together</strong>. <img class="reaction" src="https://swiftyfinch.github.io/reactions/waving_hand.png" alt="waving_hand.png" title="waving_hand.png"></p>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2021-03-09-rugby-story</guid><title>üèà **Rugby:** Optimise CocoaPods project</title><description>Do you have problems while working on a huge project with a large number of pods in **Xcode**? Maybe endless indexing? **Xcode** is always freezing during navigation through a project or while editing it? Slow rebuilding pods targets which have been already built recently?</description><link>https://swiftyfinch.github.io/en/2021-03-09-rugby-story</link><pubDate>Tue, 9 Mar 2021 00:00:00 +0500</pubDate><content:encoded><![CDATA[<p>Do you have problems while working on a huge project with a large number of pods in <strong>Xcode</strong>? Maybe¬†endless indexing? <strong>Xcode</strong> is always freezing during navigation through a project or while editing it? Slow¬†rebuilding pods targets which have been already built recently?</p><h2 id="prequel"><img class="reaction" src="https://swiftyfinch.github.io/reactions/dino.svg" alt="dino.svg" title="dino.svg"> <a href="#prequel">Prequel</a></h2><p>In recent years I have been often annoyed while working on huge projects with <a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>. And the final straw was the new project last summer 2020.</p><p>First of all, I decided to measure how much time I spend on building projects during my workday. So¬†my¬†first <strong>macOS</strong> project was born - <a href="https://github.com/swiftyfinch/Buildyosh">Buildyosh</a>.</p><p>As result, I realized that I spend about two hours a day fighting <strong>Xcode</strong>. Add a minimum of two hours for all sorts of communications and you get a four-hour workday at best.</p><p>Finally, I tried to get better hardware at the expense of the company, but I would have to wait for nearly nine months. There must be another way.</p><h2 id="problem"><img class="reaction" src="https://swiftyfinch.github.io/reactions/bug.svg" alt="bug.svg" title="bug.svg"> <a href="#problem">The problem</a></h2><p>Before doing some optimization the one needs to figure the problem's nature:</p><ul><li>Slow and unnecessary indexing of remote pods targets, which implementation I rarely try to edit;</li><li>Redundant rebuild time, probably as a result of problems, related to <a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a> or <strong>Xcode</strong> build system;</li><li>Freezing UI during navigation through a project or editing it;</li><li>Broken or extremely slow autocompletion;</li><li>Noisy laptop turbines, heated aluminum, and infinite spinning pinwheel.</li></ul><h2 id="solution1"><img class="reaction" src="https://swiftyfinch.github.io/reactions/castle.svg" alt="castle.svg" title="castle.svg"> <a href="#solution1">Solution #1 - Separate <strong>Xcode</strong> project</a></h2><p>I moved my feature part to a separate dependency and made my own small <strong>Xcode</strong> project. And it solves a lot. But the time for integration is coming. And you have to open an enormous main project again and suffer.</p><p>This solution saves plenty of time but still isn't good enough. Sometimes integration takes most of the time. But anyway, that's something.</p><h2 id="solution2"><img class="reaction" src="https://swiftyfinch.github.io/reactions/xcode.svg" alt="xcode.svg" title="xcode.svg"> <a href="#solution2">Solution #2 - Disable <strong>Xcode</strong> indexing for good</a></h2><p>Yeah, I can turn off indexing and lose the ability to use some features. And it solves the majority of problems too.</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> defaults write com.apple.dt.XCode IDEIndexDisable 1</div></code></pre><p>But I will have to forget about navigating just by clicking on the class. Instead, I will have to use search frequently. Then I need to copy, paste, and so on.</p><p>I have been using that solution all the time until I found the better one.</p><h2 id="solution3">üñ• <a href="#solution3">Solution #3 - Hardware</a></h2><p>I could buy a new <strong>MacBook Pro</strong> or request it from the company. It's the easiest solution if it's available. But I think time will pass, the project will grow, and the hardware will become old and slow again.</p><p>I couldn't get a new <strong>MacBook</strong> from the company in short time. And also, I didn't want to buy it for myself.</p><p>But in February 2021, I finally bought my own <strong>Macbook Air M1</strong>. It is a tremendous boost to my productivity. It's a pity, I didn't have it in summer 2020.</p><h2 id="solution4">üèà <a href="#solution4">Solution #4 - <strong>Rugby</strong></a></h2><p>After a while, I realized how to solve the problem at the software level. I don't need all of the targets in a project, only some of them. Perhaps ten percent or something about that.</p><p>First of all, I was trying to manage this manually. But it was a hard routine action. And I decided to experiments with <strong>Ruby</strong> scripts. I wrote a bunch of scripts and they worked sometimes. In some cases, I did this part manually.</p><p>The main idea was to build all secondary targets and remove them from the <strong>Pods</strong> project. I had plenty of decisions, which weren't well-suited, and I'm noobie in <strong>Ruby</strong> programming. I think on trying to write complex utility with limited language knowledge is not a good idea. Maybe one average file is fine, but not a bunch of them.</p><blockquote><p>Also, I tried <a href="https://github.com/leavez/cocoapods-binary">CocoaPods Binary</a> and similar solutions. But I couldn't run them on the first try and the last update was a year ago. Also, the main problem was that they change <strong>Podfile</strong> and <strong>Podfile.lock</strong> respectively. It did not suit me, since dozens of other people are working on the project and everyone has their own tasks.</p></blockquote><p>At this moment, I have already had some experience and have been ready to rewrite all from scratch using <strong>Swift</strong>. It's my primary language and there are enough useful <strong>SPM</strong> packages for command line utility development.</p><p>When I had the first utility version, I organized an alpha test. Mostly, I was testing on my own. At the end, my secret colleague joined me.</p><p>Then there was a beta test for <strong>~30</strong> users, based on statistics on <strong>GitHub</strong>. I fixed some critical bugs and added new features by useful feedback. It was an important step.</p><p>And finally, I released a stable <a href="https://github.com/swiftyfinch/Rugby/releases/tag/1.0.0">Rugby</a> version with new beta command.</p><h2 id="result"><img class="reaction" src="https://swiftyfinch.github.io/reactions/finish.svg" alt="finish.svg" title="finish.svg"> <a href="#result">Conclusion</a></h2><p>As a result, I almost managed with extensive productivity problems and made a profitable home project. Feel free to use it for your needs. Maybe you have some common problems. You can find all the additional information on <a href="https://github.com/swiftyfinch/Rugby">Github</a>.</p><p>It's another story about solving one of my daily problems.<br>I'm not sure, maybe it's not the last one about <strong>Rugby</strong>.</p><p><strong>P.S.</strong> While I was trying to write the utility using <strong>Ruby</strong>, I loved that language even more. Also, I was watching <strong>Ted Lasso</strong> series during this development. So, the name <strong>Rugby</strong> is just a word-play. Like <strong>Ruby</strong>, but with <strong>g</strong>. It's pronounced as <strong>[ÀàruÀêgb…™]</strong>.</p><p><strong>Update:</strong> Now you can read üèà <a href="https://swiftyfinch.github.io/en/2023-04-22-rugby-remastered/">Rugby: Remastered</a> story.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2020-06-20-pod-tree</guid><title>CocoaPods dependency tree üå≤</title><description>In the [last part](/en/2020-06-06-cozy-pod-install-3) I mentioned about one new idea üí°. Recently, I needed to sort out the order of bumping **CocoaPods** dependencies in a working project. In this post, I will describe how you can do it using **Ruby**.</description><link>https://swiftyfinch.github.io/en/2020-06-20-pod-tree</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0500</pubDate><content:encoded><![CDATA[<p>In the <a href="https://swiftyfinch.github.io/en/2020-06-06-cozy-pod-install-3">last part</a> I mentioned about one new idea <img class="reaction" src="https://swiftyfinch.github.io/reactions/idea.svg" alt="idea.svg" title="idea.svg">. Recently, I needed to sort out the order of bumping <strong>CocoaPods</strong> dependencies in a working project. In this post, I will describe how you can do it using <strong>Ruby</strong>.</p><h2 id="aim"><img class="reaction" src="https://swiftyfinch.github.io/reactions/aim.svg" alt="aim.svg" title="aim.svg"> <a href="#aim">Goal</a></h2><p>There is a huge project with its <strong>CocoaPods</strong> dependency repository. You need to bump the minor or major version, for example, <strong>Alamofire</strong>.</p><ul><li>Most likely, many other <strong>pods</strong> depend on such a popular library. To bump the version in the project, it is necessary to bump the <strong>Alamofire</strong> version in all dependencies;</li><li>Also, there can be a lot of indirect <strong>Alamofire</strong> dependencies;</li><li>Need to bump dependencies versions in a certain sequence. Otherwise, nothing will come of it;</li><li>Each dependency can have a separate repository. Because of this, an unsuccessful attempt to bump the version may be delayed;</li><li><strong>CocoaPods</strong> shows only one version incompatibility error:</li></ul><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pods install</div><div class="line"><span class="red">In Podfile:</span></div><div class="line"><span class="red">    Core (~&gt; 2.1.4) was resolved to 2.1.4, which depends on Network (~&gt; 2.0.1)</span></div><div class="line"><span class="red">    Authorization (~&gt; 1.1.3) was resolved to 1.1.3, which depends on Network (~&gt; 1.1.0)</span></div></code></pre><h2 id="idea"><img class="reaction" src="https://swiftyfinch.github.io/reactions/idea.svg" alt="idea.svg" title="idea.svg"> <a href="#idea">Idea</a></h2><p>Let's write a tiny <strong>utility</strong> and will pass as an argument <strong>the name of the pod</strong>. Then it will figure out in what order to bump the dependencies versions. And in the end, for clarity, this utility will draw a simple tree <img class="reaction" src="https://swiftyfinch.github.io/reactions/tree.svg" alt="tree.svg" title="tree.svg">.</p><p>For this we need to do:</p><ul><li>Find all the dependencies (fortunately, they are already in <strong>Podfile.lock</strong>);</li><li>Build a dependency tree;</li><li>Build a subtree which root will be <strong>specified as argument pod</strong>;</li><li>Draw this tree.</li></ul><p>Below I will lightly describe the idea of ‚Äã‚Äãhow such <strong>utility</strong> works. If you still have questions, feel free to ask me on <a href="https://twitter.com/swiftyfinch">Twitter</a>. Also, I do not pretend to have <strong>the optimal solution</strong> and I am open for your <strong>improvement suggestions</strong>.</p><h2 id="ruby"><img class="reaction" src="https://swiftyfinch.github.io/reactions/ruby.svg" alt="ruby.svg" title="ruby.svg"> <a href="#ruby">Language</a></h2><p>To solve this problem, I chose <strong>Ruby</strong> language.</p><ul><li>It is easier than <strong>Bash</strong> from last posts;</li><li>The utility can be easily edited and run;</li><li>No need to compile;</li><li>Also, it can be used through <strong>Fastlane</strong> <img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif">.</li></ul><h2 id="parsing"><img class="reaction" src="https://swiftyfinch.github.io/reactions/bricks.svg" alt="bricks.svg" title="bricks.svg"> <a href="#parsing">Parsing <strong>Podfile.lock</strong></a></h2><p>First, we need to parse the part of <strong>Podfile.lock</strong>. We skip all dependencies without versions since they do not need to be bumped. All sub dependencies of the form <strong>Moya/Core</strong> are considered as one dependency <strong>Moya</strong>. And then we build a tree.</p><p>Let's look at an easy example. We get the tree with the root <strong>Alamofire</strong>. The root has one child <strong>Moya</strong>. Also, the child knows that his parent <strong>Alamofire</strong>.</p><pre><code class=""><div class="line">PODS:</div><div class="line">  - Moya/Core (<span class="number">13.0.1</span>): <span class="comment"># Consider only the main Moya dependency</div><div class="line">    - Alamofire (~&gt; <span class="number">4.1</span>)</div><div class="line">    - Result <span class="comment"># Skip without version</div><div class="line">  - Alamofire (<span class="number">4.8.2</span>)</div></code></pre><h2 id="steps"><img class="reaction" src="https://swiftyfinch.github.io/reactions/map.svg" alt="map.svg" title="map.svg"> <a href="#steps">Step by step</a></h2><p>When the main tree is built, we need to find out a subtree with <strong>the specified pod</strong> in the root. To do this, we first determine <strong>all parents</strong> of the specified pod. Then we will consider <strong>the children of each parent</strong> and try to find <strong>the intersection of the children and the rest of the parents</strong>. If <strong>there is no intersection</strong>, then this means we have no blocking dependencies.</p><p>In other words, we can bump the version from the considered <strong>parent</strong> in the first step. Then <strong>exclude such parents</strong> and repeat the search for the second step. And so on.</p><p>Let's look at a simple example. The parents of <strong>Alamofire</strong>: <strong>Moya</strong> and <strong>Network</strong>. <strong>Network</strong> has a child <strong>Moya</strong> which crosses with parents. And <strong>Moya</strong> has no intersection. So, the first step will contain <strong>Moya</strong> and the second <strong>Network</strong>.</p><pre><code class=""><div class="line">PODS:</div><div class="line">  - Alamofire (<span class="number">1.0.0</span>)</div><div class="line">  - Network (<span class="number">1.0.0</span>):</div><div class="line">    - Moya (= <span class="number">1.0.0</span>)</div><div class="line">    - Alamofire (= <span class="number">1.0.0</span>)</div><div class="line">  - Moya (<span class="number">1.0.0</span>):</div><div class="line">    - Alamofire (= <span class="number">1.0.0</span>)</div></code></pre><h2 id="tree"><img class="reaction" src="https://swiftyfinch.github.io/reactions/tree.svg" alt="tree.svg" title="tree.svg"> <a href="#tree">Steps tree</a></h2><p>After found out <strong>all the dependencies for the current step</strong>, need to <strong>consider the children of each dependency</strong>. Find <strong>children</strong> which were determined <strong>in the previous step</strong>. They will become <strong>parents</strong> for <strong>the current dependency</strong>.</p><p>And again let's look at a small example. We will use the data from the section above. <strong>Alamofire</strong> at the root. Then at the first step, we have <strong>Moya</strong>, because it has child <strong>Alamofire</strong> and it was at the last step (in the root). Then <strong>Network</strong>, because it has two children <strong>Alamofire</strong> and <strong>Moya</strong>. But only <strong>Moya</strong> was in the previous step.</p><pre><code class=""><div class="line">Alamofire <span class="number">‚û°Ô∏é</span> Moya <span class="number">‚û°Ô∏é</span> Network</div></code></pre><h2 id="draw"><img class="reaction" src="https://swiftyfinch.github.io/reactions/draw.svg" alt="draw.svg" title="draw.svg"> <a href="#draw">Let's draw</a></h2><p>The main task has already been solved, but it remains to draw a tree. Let's <strong>go down from the root</strong>. Look at each child and start from it <strong>recursively</strong>. And also add some paints.</p><pre><code class=""><div class="line"><span class="red-circle">‚Ä¢</span> Alamofire</div><div class="line">  <span class="yellow-circle">‚Ä¢</span> Moya</div><div class="line">    <span class="green-circle">‚Ä¢</span> Network</div></code></pre><h2 id="usage"><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif"> <a href="#usage">How to use it?</a></h2><p>I posted the final solution on <a href="https://gist.github.com/swiftyfinch/7cfab946a17ae1998cd4d6c62cdf7a33">GithubGist</a>. Also I added detailed usage help.</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> ruby PodTree.rb help</div><div class="line"><span class="green">Tiny utility for visualise Pod dependencies tree.</div><div class="line"><span class="green">Skips subspecs and pods without versions.</div><div class="line">Help options: ["-h", "--help", "help"]</div><div class="line"><span class="yellow">  ‚Ä¢ 1st argument will be used as root Pod</span></div><div class="line"><span class="yellow">  ‚Ä¢ 2nd one is path to Podfile (pwd by default)</span></div><div class="line"></div>
<div class="line"><span class="yellow">ruby PodTree.rb A Podfile.lock</span></div><div class="line"><span class="green">Podfile.lock:         Output:</span></div><div class="line">- A (1.0.0)           <span class="red-circle">‚Ä¢</span> A</div><div class="line">- B (1.0.0):            <span class="yellow-circle">‚Ä¢</span> D</div><div class="line">  - A (= 1.0.0)           <span class="green-circle">‚Ä¢</span> C</div><div class="line">  - C (= 1.0.0)             <span class="blue-circle">‚Ä¢</span> B</div><div class="line">  - D (= 1.0.0)           <span class="green-circle">‚Ä¢</span> E</div><div class="line">- C (1.0.0):</div><div class="line">  - A (= 1.0.0)</div><div class="line">  - D (= 1.0.0)</div><div class="line">- D (1.0.0):</div><div class="line">  - A (= 1.0.0)</div><div class="line">- E (1.0.0):</div><div class="line">  - A (= 1.0.0)</div><div class="line">  - D (= 1.0.0)</div></code></pre><h2 id="result"><img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"> <a href="#result">Result</a></h2><ul><li>The problem was solved;</li><li>A tree <img class="reaction" src="https://swiftyfinch.github.io/reactions/tree.svg" alt="tree.svg" title="tree.svg"> <s>planted</s> painted;</li><li>I was glad to share this solution with you;</li><li><a href="https://twitter.com/swiftyfinch">Twit me</a> if you have questions or improvement ideas.</li></ul><p>Thank you all for your attention! I hope you enjoyed the post. And that's all for now. <br>I'm starting to play <strong>Last of Us 2</strong> and going to watch <strong>WWDC 2020</strong> soon.</p><p><br></p><p>üí¨ Please, leave some feedback in <strong>Twitter</strong> post.<br>It will help me improve posts and continue to publish new ones.</p><blockquote class="twitter-tweet" data-lang="en" data-dnt="true"><p lang="en" dir="ltr"><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif">CocoaPods dependency tree<img class="reaction" src="https://swiftyfinch.github.io/reactions/tree.svg" alt="tree.svg" title="tree.svg"><a href="https://twitter.com/hashtag/cocoapods?src=hash&amp;ref_src=twsrc%5Etfw">#cocoapods</a> <a href="https://twitter.com/hashtag/ruby?src=hash&amp;ref_src=twsrc%5Etfw">#ruby</a> <a href="https://twitter.com/hashtag/tools?src=hash&amp;ref_src=twsrc%5Etfw">#tools</a> <a href="https://twitter.com/hashtag/tech?src=hash&amp;ref_src=twsrc%5Etfw">#tech</a> <a href="https://twitter.com/hashtag/tree?src=hash&amp;ref_src=twsrc%5Etfw">#tree</a><a href="https://t.co/R9Ymre44W1">https://t.co/R9Ymre44W1</a> <a href="https://t.co/MfRM5QvNcx">pic.twitter.com/MfRM5QvNcx</a></p>&mdash; –ù—É –°–ª–∞–∞–∞–∞–≤–∞ (@swiftyfinch) <a href="https://twitter.com/swiftyfinch/status/1274762318631571457?ref_src=twsrc%5Etfw">June 21, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2020-06-06-cozy-pod-install-3</guid><title>(p.3) Cozy pod install üåø</title><description>In the [last part](/en/2020-05-31-cozy-pod-install-2), we wrote a small wrapper over the regular **CocoaPods** and figure out how to skip unnecessary calls. In this part, let's try to automate a couple of interesting cases. The main goal is to run the **pods install** command and switch to other tasks while it is running.</description><link>https://swiftyfinch.github.io/en/2020-06-06-cozy-pod-install-3</link><pubDate>Sat, 6 Jun 2020 00:00:00 +0500</pubDate><content:encoded><![CDATA[<p>In the <a href="https://swiftyfinch.github.io/en/2020-05-31-cozy-pod-install-2">last part</a>, we wrote a small wrapper over the regular <strong>CocoaPods</strong> and figure out how to skip unnecessary calls. In this part, let's try to automate a couple of interesting cases. The main goal is to run the <strong>pods install</strong> command and switch to other tasks while it is running.</p><h2 id="bundler"><img class="reaction" src="https://swiftyfinch.github.io/reactions/toolbox.svg" alt="toolbox.svg" title="toolbox.svg"> <a href="#bundler">Bundler</a></h2><p>The first drawback is that sometimes <strong>Bundler</strong> informs us that it would be nice to call <strong>bundler install</strong> before calling <strong>pods install</strong>. Usually, this is happening because someone from other developers changed <strong>Gemfile</strong> and then you pulled new changes from <strong>git</strong>.</p><p>But why that inconvenient? Because you first need to run <strong>pods install</strong>. Then notice that you need to call <strong>bundler install</strong>. Call it and wait for completion. And finally, call <strong>pods install</strong> again. Not great, but not terrible.</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pods install</div><div class="line"><span class="red">Could not find gem 'cocoapods (= 1.9.2)' in any of the gem sources listed in your Gemfile.</span></div><div class="line"><span class="yellow">Run `bundle install` to install missing gems.</span></div></code></pre><h2 id="out_of_date"><img class="reaction" src="https://swiftyfinch.github.io/reactions/calendar2.svg" alt="calendar2.svg" title="calendar2.svg"> <a href="#out_of_date">Out of date source repos</a></h2><p>The second drawback is that sometimes when calling <strong>pods install</strong> you may get an error from <strong>CocoaPods</strong> related to the irrelevance of the local dependency repository. When does this happen? Usually when a dependency has a new version and it is listed in <strong>Podfile</strong>, but you do not have this version locally yet.</p><p>In this case, <strong>CocoaPods</strong> offers some options:</p><ul><li><strong>pod repo update</strong> and then <strong>pod install</strong>;</li><li><strong>pod install --repo-update</strong> the same as above, but in one command.</li></ul><p>In other words, we need to update the local dependency repository, and then call <strong>pods install</strong>. As same as the last drawback, it is like a waste of time. Besides, usually updating the local repository takes much longer.</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pods install</div><div class="line">Analyzing dependencies</div><div class="line"><span class="red">[!] CocoaPods could not find compatible versions for pod "Frog":</span></div><div class="line"><span class="red">  In Podfile:</span></div><div class="line"><span class="red">    Frog (~> 1.3.0)</span></div>
<div class="line"><span class="red">None of your spec sources contain a spec satisfying the dependency: `Frog (~> 1.3.0)`.</span></div>
<div class="line"><span class="red">You have either:</span></div><div class="line"><span class="red"> * out-of-date source repos which you can update with `pod repo update`
or with `pod install --repo-update`.</span></div><div class="line"><span class="red"> * mistyped the name or version.</span></div><div class="line"><span class="red"> * not added the source repo that hosts the Podspec to your Podfile.</span></div></code></pre><p>It is worth noting that starting with <strong>CocoaPods 1.8 Beta</strong> this is no longer a problem. Now <strong>cdn</strong> is used by default and you no longer need to store the local repository. But not everyone has moved and for someone, the problem is still relevant.</p><blockquote><p>A <strong>CDN</strong> is a <strong>Content Delivery Network</strong> - what this means for <strong>CocoaPods</strong> is that using <strong>CocoaPods</strong> won't require you to have a local copy of all the public <strong>Podspecs</strong> on your computer. Saving you about a GB of file storage, and shaving a lot of time off pod installs.</p></blockquote><h2 id="superfast"><img class="reaction" src="https://swiftyfinch.github.io/reactions/lightning.svg" alt="lightning.svg" title="lightning.svg"> <a href="#superfast">Superfast solution</a></h2><p>But what if we just always call all the commands in a bunch one after another? Nothing complicated and the whole solution fits in one line:</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> bundle install &amp;&amp; pods repo update &amp;&amp; pods install</div></code></pre><p>But the problem is that updating local repositories takes time. And it is a terrible idea always to call these commands. It lasts a few minutes for me and it is pretty slow.</p><h2 id="bug"><img class="reaction" src="https://swiftyfinch.github.io/reactions/bug.svg" alt="bug.svg" title="bug.svg"> <a href="#bug">Error handling</a></h2><p>Let's handle the errors and call updating of the local repositories if needed. In the last post, we already prepared the <strong>pod_install</strong> function. So, it remains only to add processing to it.</p><p>To do this, we will use the <strong>while</strong> loop and the variable with the number of attempts. Inside the loop, call <strong>bundle exec pod install</strong> and get the command execution code. Depending on the code, we decide what to do next.</p><p>For example, if the code is <strong>7</strong>, then we call <strong>bundle install</strong>, write information about the error and its solution to the console. Then go to the next step of the loop and call <strong>bundle exec pod install</strong> again. Handle the error and so on.</p><p>As a result, we will process all errors known to us and sequentially update all local repositories if necessary.</p><pre><code class="block"><div class="line">tries=<span class="number">2</span></div><div class="line"><span class="keyword">while</span> (( $tries > <span class="number">0</span> ))</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="method">bundle exec pod install</span> <span class="string">"$@"</span></div><div class="line">    error=<span class="call">$?</span></div><div class="line">    <span class="keyword">if</span> (( error == <span class="number">7</span> )) ; <span class="keyword">then</span></div><div class="line">        <span class="keyword">echo -e</span> <span class="string">"\n‚ö†Ô∏è Error code: ${error}"</span></div><div class="line">        <span class="keyword">echo -e</span> <span class="string">"üöë Let's try bundle install\n"</span></div><div class="line">        <span class="method">bundle install</span></div><div class="line">    <span class="keyword">elif</span> (( error == <span class="number">31</span> )) ; <span class="keyword">then</span></div><div class="line">        <span class="keyword">echo -e</span> <span class="string">"\n‚ö†Ô∏è  Error code: ${error}"</span></div><div class="line">        <span class="keyword">echo -e</span> <span class="string">"üöë Let's try --repo-update\n"</span></div><div class="line">        <span class="method">bundle exec pod install --repo-update</span></div><div class="line">    <span class="keyword">elif</span> (( error != <span class="number">0</span> )) ; <span class="keyword">then</span></div><div class="line">        <span class="keyword">echo -e</span> <span class="string">"\n‚ö†Ô∏è Error code: ${error}"</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">echo -e</span> <span class="string">"<img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"> Everything fine."</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    tries=<span class="call">$</span>(( $tries - <span class="number">1</span> ))</div><div class="line"><span class="keyword">done</span></div></code></pre><h2 id="message"><img class="reaction" src="https://swiftyfinch.github.io/reactions/loudspeaker.svg" alt="loudspeaker.svg" title="loudspeaker.svg"> <a href="#message">One more thing</a></h2><p>There remains only one small problem. When can we stop drinking coffee and watch memes? In other words, how do you know when a command will finish? Of course, you can from time to time check terminal. But it is not convenient.</p><p>It would be nice to have a notification of completion. And we will add it!</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> tput bel</div></code></pre><p>Just add a small command at the very end of the <strong>pods_install</strong> function. So, we will get a standard sound notification and see the unread message icon on the terminal icon.</p><img src="https://swiftyfinch.github.io/posts/2020-06-06-cozy-pod-install-3/bell.png"/><h2 id="usage"><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif"> <a href="#usage">How to use it?</a></h2><p>I shared the final version on <a href="https://gist.github.com/swiftyfinch/53c76e2faff3de83371193468380e90c">Github Gists</a>. There are combined all the code from the posts and added the commands coloring in the terminal. A little, but nice. Detailed installation instructions:</p><ul><li>Open <strong>.bash_profile</strong>;</li><li>Copy the code from <a href="https://gist.github.com/swiftyfinch/53c76e2faff3de83371193468380e90c">Github Gists</a> to <strong>.bash_profile</strong>;</li><li>Apply changes from <strong>.bash_profile</strong>;</li><li>Use <strong>pods install</strong>.</li></ul><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> open -a Xcode ~/.bash_profile</div><div class="line"><span class="comment"># Copy code from Github Gists to .bash_profile</span></div><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> source ~/.bash_profile</div><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pods install</div></code></pre><h2 id="end"><img class="reaction" src="https://swiftyfinch.github.io/reactions/finish.svg" alt="finish.svg" title="finish.svg"> <a href="#end">The End</a></h2><p>What did we get?</p><ul><li>A small <strong>Bash</strong> wrapper over <strong>CocoaPods</strong>;</li><li>Allows you to call one short command <strong>pods install</strong> and <s>watch memes</s> switch to other important tasks;</li><li>All intermediate steps do not require your participation;</li><li>No need to periodically check terminal ‚Äî a bell will notify you about completion.</li></ul><p>This is where I finish my experiments with <strong>CocoaPods</strong> and <strong>Bash</strong>. I solved my problem and was happy to share this with you. It was very interesting to work a bit with scripts and write something unusual for an iOS developer.</p><p><img class="reaction" src="https://swiftyfinch.github.io/reactions/idea.svg" alt="idea.svg" title="idea.svg"> I have an idea... Perhaps there will be another post with a script on <strong>Ruby</strong>.</p><p><br></p><p>üí¨ Please, leave some feedback in <strong>Twitter</strong> post.<br>It will help me improve posts and continue to publish new ones.</p><blockquote class="twitter-tweet" data-lang="en" data-dnt="true"><p lang="en" dir="ltr">I&#39;ve just translated the last part: Cozy pod install<img class="reaction" src="https://swiftyfinch.github.io/reactions/herb.svg" alt="herb.svg" title="herb.svg"><a href="https://twitter.com/hashtag/ios?src=hash&amp;ref_src=twsrc%5Etfw">#ios</a> <a href="https://twitter.com/hashtag/cocoapods?src=hash&amp;ref_src=twsrc%5Etfw">#cocoapods</a> <a href="https://twitter.com/hashtag/bash?src=hash&amp;ref_src=twsrc%5Etfw">#bash</a> <a href="https://twitter.com/hashtag/tools?src=hash&amp;ref_src=twsrc%5Etfw">#tools</a><a href="https://t.co/nh9RefeGMy">https://t.co/nh9RefeGMy</a> <a href="https://t.co/uvXtcWfBvQ">pic.twitter.com/uvXtcWfBvQ</a></p>&mdash; –ù—É –°–ª–∞–∞–∞–∞–≤–∞ (@swiftyfinch) <a href="https://twitter.com/swiftyfinch/status/1273673851973623808?ref_src=twsrc%5Etfw">June 18, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2020-05-31-cozy-pod-install-2</guid><title>(p.2) Cozy pod install üåø</title><description>In [last part](/en/2020-05-23-cozy-pod-install), we cut down the **bundle exec pod install** command to **pods install**. Just one letter more than the usual ** pod install**. And this time let's see what other upset moments happen while using this command.</description><link>https://swiftyfinch.github.io/en/2020-05-31-cozy-pod-install-2</link><pubDate>Sun, 31 May 2020 00:00:00 +0500</pubDate><content:encoded><![CDATA[<p>In <a href="https://swiftyfinch.github.io/en/2020-05-23-cozy-pod-install">last part</a>, we cut down the <strong>bundle exec pod install</strong> command to <strong>pods install</strong>. Just one letter more than the usual <strong> pod install</strong>. And this time let's see what other upset moments happen while using this command.</p><p>Let's describe which scenarios of using <strong>pod install</strong> exist. But first, need to figure out which files are involved in dependency resolving when running this command:</p><ul><li><strong>Podfile</strong> describes the necessary dependencies;</li><li><strong>Podfile.lock</strong> describes the installed dependencies;</li><li><strong>Manifest.lock</strong> a local copy of the <strong>Podfile.lock</strong>. Located in the <strong>Pods</strong> folder.</li></ul><h2 id="new"><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif"> <a href="#new">Scenario 1: New project</a></h2><p>A new project without <strong>CocoaPods</strong>. Call <strong>pod init</strong>, then describe the dependencies in <strong>Podfile</strong>. Finally, call <strong>pod install</strong> for the first time. At the time of the call <strong>CocoaPods</strong> is looking that there is no <strong>Podfile.lock</strong> file yet. Then installs all the dependencies described in <strong>Podfile</strong>. In the end, <strong>Podfile.lock</strong> and its local copy <strong>Manifest.lock</strong> are created.</p><h2 id="change"><img class="reaction" src="https://swiftyfinch.github.io/reactions/edit.svg" alt="edit.svg" title="edit.svg"> <a href="#change">Scenario 2: Changed something</a></h2><p>In this scenario, we change <strong>Podfile</strong> or <strong>*. podspec</strong> for the local dependency. Maybe we added a new dependency or changed the description. When called, <strong>Podfile.lock</strong> and its local copy <strong>Manifest.lock</strong> are updated.</p><p>In my opinion, there is nothing to optimize in the first two scenarios. But we would not break them with our future optimization.</p><h2 id="sync"><img class="reaction" src="https://swiftyfinch.github.io/reactions/sync.svg" alt="sync.svg" title="sync.svg"> <a href="#sync">Scenario 3: Sync</a></h2><p>Download a new project or new changes from <strong>git</strong> where <strong>Podfile.lock</strong> already exists. When the command is called, the dependencies from two files are usually compared: <strong>Podfile.lock</strong> and your local file <strong>Manifest.lock</strong>. Dependencies from <strong>Podfile.lock</strong> are updated and copied to <strong>Manifest.lock</strong>.</p><p>Everything is as usual, but there is one caveat. The project will be regenerated even if <strong>Podfile.lock</strong> and <strong>Manifest.lock</strong> are the same. In other words, if <strong>pod install</strong> was not needed, and you called it, then it will not work instantly. And will not say that it was not needed at all now.</p><p>On my working project, this unnecessary run takes a <strong>full minute</strong>. Maybe this is not so much, but obviously, this time can be used more usefully.</p><h2 id="xcode"><img class="reaction" src="https://swiftyfinch.github.io/reactions/xcode.svg" alt="xcode.svg" title="xcode.svg"> <a href="#xcode">Solving the problem in <strong>Xcode</strong></a></h2><p>A solution to this problem is already in <strong>Build Phases</strong> of the project generated using <strong>CocoaPods</strong>. That is. You just always need to first try to build the project, and then call <strong>pod install</strong> in the terminal.</p><img src="https://swiftyfinch.github.io/posts/2020-05-31-cozy-pod-install-2/manifest.png"/><p>In this script, <strong>Podfile.lock</strong> and <strong>Manifest.lock</strong> are compared using the <strong>diff</strong> command. And if they are not equal, then <strong>Xcode</strong> will have a familiar error <strong>The sandbox is not in sync with the Podfile.lock‚Ä¶</strong></p><p>In general, this is a great solution, but what if you still forgot? Opened the terminal and called first the unnecessary <strong>pod install</strong>? Or your project is huge and working slowly?</p><p><strong>Just wait a minute!</strong> - you would say. But I can‚Äôt wait. Moreover, this is not the last thing I would like to make more convenient in <strong>pod install</strong>. And it's so magnetic work with <strong>Bash</strong>.</p><h2 id="blackjack"><img class="reaction" src="https://swiftyfinch.github.io/reactions/bender.svg" alt="bender.svg" title="bender.svg"> <a href="#blackjack">Our own <strong>pod install</strong> with blackjack</a></h2><p>Why not? Well, no way. It is for a very long time and senseless. And also need to support the release of new versions that can break everything.</p><p>But why not just write a small wrapper over <strong>CocoaPods</strong> and add a check before calling <strong>pod install</strong>, as is done in <strong>Xcode</strong>? Can we?</p><p>All that we will do needs to be placed in your <strong>.bash_profile</strong>, as we did in the <a href="https://swiftyfinch.github.io/en/2020-05-23-cozy-pod-install">last part</a>. First, create a simple wrapper function <strong>pods_install</strong>. With this function, we can add a check before calling <strong>pod install</strong>. And much more.</p><pre><code class="block"><div class="line"><span class="keyword">function</span> pods_install() {</div><div class="line">    <span class="comment"># TODO: Add compare Podfile.lock and Manifest.lock</span></div><div class="line">    <span class="method">bundle exec</span> pod install <span class="string">"$@"</span></div><div class="line">}</div></code></pre><p>Then we need to make sure that everything works exactly as before. And will not break something. Instead of <strong>alias</strong> from the previous post, we will create the <strong>pods</strong> function. If the argument <strong>install</strong> is passed to this function, we will throw away this argument and call <strong>pods_install</strong>. Otherwise, we just replace <strong>pods</strong> with <strong>bundle exec pod</strong>.</p><pre><code class="block"><div class="line"><span class="comment"># Instead of the alias from the last post</span></div><div class="line"><span class="keyword">function</span> pods() {</div><div class="line">    <span class="keyword">case</span> <span class="call">$*</span> <span class="keyword">in</span></div><div class="line">        install ) <span class="keyword">shift</span> <span class="number">1</span>; pods_install <span class="string">"$@"</span> ;;</div><div class="line">        <span class="call">*</span> ) <span class="keyword">command</span> <span class="method">bundle exec</span> pod <span class="string">"$@"</span> ;;</div><div class="line">    <span class="keyword">esac</span></div><div class="line">}</div></code></pre><p>So far so good. Everything still works as before. Remains to add the check to <strong>pods_install</strong>. I copied the code from <strong>Xcode</strong> and cut down it as much as possible for simplicity. The <strong>diff</strong> command is used for comparison. The command log is not output to the terminal. After execution, we check the value of the result of the command. If it is zero the files are the same. Otherwise, we exit the function and skip <strong>pod install</strong>.</p><pre><code class="block"><div class="line"><span class="keyword">function</span> pods_install() {</div><div class="line">    <span class="method">diff</span> <span class="string">"Podfile.lock" "Pods/Manifest.lock"</span> &gt; <span class="call">/dev/null</span></div><div class="line">    <span class="keyword">if</span> [ <span class="call">$?</span> == <span class="number">0</span> ] ; <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="method">bundle exec</span> pod install <span class="string">"$@"</span></div><div class="line">}</div></code></pre><h2 id="bug"><img class="reaction" src="https://swiftyfinch.github.io/reactions/bug.svg" alt="bug.svg" title="bug.svg"> <a href="#bug">Debug</a></h2><p>Let's check all the scenarios:</p><ul><li>New project. When called, we get <strong>diff: Podfile.lock: No such file or directory</strong>. Then <strong>pod install</strong> is executed and <strong>Podfile.lock</strong> is created. That's OK;</li></ul><ul><li>Sync. If <strong>Podfile.lock</strong> was not changed in <strong>git</strong>, then <strong>pod install</strong> is not called. Else the local <strong>Manifest.lock</strong> is different from <strong>Podfile.lock</strong>, so <strong>pod install</strong> is called. Jobs done;</li></ul><ul><li>We changed something in <strong>Podfile</strong> or <strong>*.podspec</strong> for the local dependency. Nothing happens when calling <strong>pod install</strong>. Because <strong>Podfile.lock</strong> and <strong>Manifest.lock</strong> remain the same. This is bad, we have to figure out how can force <strong>pod install</strong> to run. That's buggy.</li></ul><h2 id="force"><img class="reaction" src="https://swiftyfinch.github.io/reactions/force.svg" alt="force.svg" title="force.svg"> <a href="#force">Force <strong>pod install</strong></a></h2><p>The easiest way to fix the buggy scenario is to add a new mode. In this mode, we will always call <strong>pod install</strong> without checking <strong>Podfile.lock</strong> and <strong>Manifest.lock</strong>. We always know when we added a new dependency or changed local <strong>*.podspec</strong>.</p><p>Let's change the <strong>pods_install</strong> function first. For simplicity, we will check only the first argument. If it is <strong>-f</strong>, then skip the step where we compare <strong>Podfile.lock</strong> and <strong>Manifest.lock</strong>. Otherwise, skip the first argument and pass everything else to <strong>pod install</strong>.</p><pre><code class="block"><div class="line"><span class="keyword">function</span> pods_install() {</div><div class="line">    <span class="comment"># Check the first argument and if it is -f </span></div><div class="line">    <span class="keyword">if</span> [ <span class="call">"$1"</span> == <span class="string">"-f"</span> ] ; <span class="keyword">then</span></div><div class="line">        <span class="comment"># Throw it away so as not to pass it to pod install</span></div><div class="line">        <span class="keyword">shift</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment"># Otherwise all as before</span></div><div class="line">        <span class="method">diff</span> <span class="string">"Podfile.lock" "Pods/Manifest.lock"</span> &gt; <span class="call">/dev/null</span></div><div class="line">        <span class="keyword">if</span> [ <span class="call">$?</span> == <span class="number">0</span> ] ; <span class="keyword">then</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="method">bundle exec</span> pod install <span class="string">"$@"</span></div><div class="line">}</div></code></pre><p>It remains to slightly update the <strong>pods</strong> function. Again, for simplicity, I decided to use the <strong>pods install!</strong> command. It is slightly shorter to use and easier to implement. In the function, we check if the argument is <strong>install!</strong>, when <strong>pods_install</strong> is called, we pass the first argument <strong>-f</strong>, and then the remaining arguments. The rest is unchanged.</p><pre><code class="block"><div class="line"><span class="keyword">function</span> pods() {</div><div class="line">    <span class="keyword">case</span> <span class="call">$*</span> <span class="keyword">in</span></div><div class="line">        install! ) <span class="keyword">shift</span> <span class="number">1</span>; pods_install -f <span class="string">"$@"</span> ;;</div><div class="line">        install ) <span class="keyword">shift</span> <span class="number">1</span>; pods_install <span class="string">"$@"</span> ;;</div><div class="line">        <span class="call">*</span> ) <span class="keyword">command</span> <span class="method">bundle exec</span> pod <span class="string">"$@"</span> ;;</div><div class="line">    <span class="keyword">esac</span></div><div class="line">}</div></code></pre><h2 id="message"><img class="reaction" src="https://swiftyfinch.github.io/reactions/loudspeaker.svg" alt="loudspeaker.svg" title="loudspeaker.svg"> <a href="#message">Add message</a></h2><p>Add a small message that this time there were no changes and <strong>pod install</strong> was not called. The final version will look like this.</p><pre><code class="block"><div class="line"><span class="keyword">function</span> pods_install() {</div><div class="line">    <span class="keyword">if</span> [ <span class="call">"$1"</span> == <span class="string">"-f"</span> ] ; <span class="keyword">then</span></div><div class="line">        <span class="keyword">shift</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="method">diff</span> <span class="string">"Podfile.lock" "Pods/Manifest.lock"</span> &gt; <span class="call">/dev/null</span></div><div class="line">        <span class="keyword">if</span> [ <span class="call">$?</span> == <span class="number">0</span> ] ; <span class="keyword">then</span></div><div class="line">            <span class="keyword">echo</span> <span class="string">"<img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"> Everything is up to date."</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="method">bundle exec</span> pod install <span class="string">"$@"</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">function</span> pods() {</div><div class="line">    <span class="keyword">case</span> <span class="call">$*</span> <span class="keyword">in</span></div><div class="line">        install! ) <span class="keyword">shift</span> <span class="number">1</span>; pods_install -f <span class="string">"$@"</span> ;;</div><div class="line">        install ) <span class="keyword">shift</span> <span class="number">1</span>; pods_install <span class="string">"$@"</span> ;;</div><div class="line">        <span class="call">*</span> ) <span class="keyword">command</span> <span class="method">bundle exec</span> pod <span class="string">"$@"</span> ;;</div><div class="line">    <span class="keyword">esac</span></div><div class="line">}</div></code></pre><h2 id="result"><img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"> <a href="#result">Result</a></h2><ul><li>In this part, we made <strong>pod install</strong> a little more convenient;</li><li>Prepared <strong>Bash</strong> function for new enhancements;</li><li>And didn‚Äôt break anything (but I'm not sure).</li></ul><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pods install</div><div class="line"><img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"> Everything is up to date.</div>
<div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pods install!</div><div class="line">Analyzing dependencies</div><div class="line">Downloading dependencies</div><div class="line"><span class="green">Installing Alamofire (5.2.0)</span></div><div class="line"><span class="green">Pod installation complete!</span></div><div class="line"><span class="green">There are 2 dependencies from the Podfile and 2 total pods installed.</span></div></code></pre><p>In the <a href="https://swiftyfinch.github.io/en/2020-06-06-cozy-pod-install-3">next part</a> we will try to make <strong>pod install</strong> even more convenient. We will learn how to calmly switch to <s>drink coffee and watch memes</s> other important tasks, and not to constantly check the terminal in the hope that everything is already installed.</p><p><br></p><p>üí¨ Please, leave some feedback in <strong>Twitter</strong> post.<br>It will help me improve posts and continue to publish new ones.</p><blockquote class="twitter-tweet" data-lang="en" data-dnt="true"><p lang="en" dir="ltr">(p.2) Cozy pod install <img class="reaction" src="https://swiftyfinch.github.io/reactions/herb.svg" alt="herb.svg" title="herb.svg"><a href="https://twitter.com/hashtag/ios?src=hash&amp;ref_src=twsrc%5Etfw">#ios</a> <a href="https://twitter.com/hashtag/cocoapods?src=hash&amp;ref_src=twsrc%5Etfw">#cocoapods</a> <a href="https://twitter.com/hashtag/bash?src=hash&amp;ref_src=twsrc%5Etfw">#bash</a> <a href="https://twitter.com/hashtag/tools?src=hash&amp;ref_src=twsrc%5Etfw">#tools</a><a href="https://t.co/p5gA7SFON6">https://t.co/p5gA7SFON6</a> <a href="https://t.co/94nWK291Sw">pic.twitter.com/94nWK291Sw</a></p>&mdash; –ù—É –°–ª–∞–∞–∞–∞–≤–∞ (@swiftyfinch) <a href="https://twitter.com/swiftyfinch/status/1272183521130557445?ref_src=twsrc%5Etfw">June 14, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2020-05-23-cozy-pod-install</guid><title>(p.1) Cozy pod install üåø</title><description>In this post, I will describe how you can ‚ú® enhance your work with **CocoaPods** in the terminal. I often have to use **CocoaPods** in my work, and even more often I open a terminal and write there **pod install**.</description><link>https://swiftyfinch.github.io/en/2020-05-23-cozy-pod-install</link><pubDate>Sat, 23 May 2020 00:00:00 +0500</pubDate><content:encoded><![CDATA[<p>In this post, I will describe how you can <img class="reaction" src="https://swiftyfinch.github.io/reactions/sparks.svg" alt="sparks.svg" title="sparks.svg"> enhance your work with <strong>CocoaPods</strong> in the terminal. I often have to use <strong>CocoaPods</strong> in my work, and even more often I open a terminal and write there <strong>pod install</strong>.</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pod install</div></code></pre><h2 id="cocoapods"><img class="reaction" src="https://swiftyfinch.github.io/reactions/herb.svg" alt="herb.svg" title="herb.svg"> <a href="#cocoapods">CocoaPods</a></h2><p>You can read more about <strong>CocoaPods</strong> <a href="https://cocoapods.org">here</a>. In short, this is the dependency (<strong>pods</strong>) manager. It allows you to describe the necessary dependencies in a convenient form. Then use a set of simple commands to load them and integrate into your <strong>Xcode</strong> project.</p><p>The most used command is <strong>pod install</strong>. You can read more about it <a href="https://guides.cocoapods.org/terminal/commands.html#pod_install">here</a>.<br>Let's get to know it a little closer and try to understand what can upset us.</p><p>The usual usage scenario looks like this:</p><ul><li>We pull up the latest changes from the repository;</li><li>Open the terminal, go to the project folder;</li><li>Call <strong>pod install</strong>, wait until everything is installed;</li><li>Launch the project.</li></ul><h2 id="bundler"><img class="reaction" src="https://swiftyfinch.github.io/reactions/toolbox.svg" alt="toolbox.svg" title="toolbox.svg"> <a href="#bundler">Bundler</a></h2><p>The first upset with regularly using <strong>pod install</strong> is <strong>Bundler</strong>. Another dependency manager, but this time for <strong>Ruby</strong>.</p><p>When calling <strong>pod install</strong>, it's creating a file with a description of all installed dependencies ‚Äî <strong>Podfile.lock</strong>. This file also contains your version of <strong>CocoaPods</strong>. Since it can be different depending on the developer's environment, it is also worth syncing. This will reduce the number of conflicts in <strong>git</strong>.</p><p>But what exactly is the problem? <strong>Just use it and that's all!</strong> ‚Äî you will say. But this is twice more words.</p><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> bundle exec pod install</div></code></pre><h2 id="bash"><img class="reaction" src="https://swiftyfinch.github.io/reactions/idea.svg" alt="idea.svg" title="idea.svg"> <a href="#bash">Bash alias</a></h2><p>Perhaps someone has already guessed that this problem is easily solved using aliases in <strong>Bash</strong>. The idea is very simple. We will come up with a short word that will be replaced with this long four-letter command.</p><p>OK, we are set up. It is best to fix this for good. To do this, let's write this <strong>alias</strong> to <strong>.bash_profile</strong>.</p><ul><li>Add the alias <strong>pods</strong> in <strong>.bash_profile</strong>;</li><li>Apply changes from <strong>.bash_profile</strong>;</li><li>Use it!</li></ul><pre><code class="terminal"><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> echo alias pods=\"bundle exec pod\" >> ~/.bash_profile</div><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> source ~/.bash_profile</div><div class="line"><span class="red-circle">‚Ä¢</span><span class="yellow-circle">‚Ä¢</span><span class="green-circle">‚Ä¢</span> pods install</div></code></pre><p>That's all for now. In the <a href="https://swiftyfinch.github.io/en/2020-05-31-cozy-pod-install-2">next part</a> of this post, I will describe what other upsets are encountered using <strong>pods install</strong>. And we will make it a little bit better.</p><p><br></p><p>üí¨ Please, leave some feedback in <strong>Twitter</strong> post.<br>It will help me improve posts and continue to publish new ones.</p><blockquote class="twitter-tweet" data-lang="en" data-dnt="true"><p lang="en" dir="ltr"><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif">Translated one more post &quot;(p.1) Cozy pod install&quot;<a href="https://twitter.com/hashtag/ios?src=hash&amp;ref_src=twsrc%5Etfw">#ios</a> <a href="https://twitter.com/hashtag/tools?src=hash&amp;ref_src=twsrc%5Etfw">#tools</a> <a href="https://twitter.com/hashtag/cocoapods?src=hash&amp;ref_src=twsrc%5Etfw">#cocoapods</a> <a href="https://twitter.com/hashtag/bash?src=hash&amp;ref_src=twsrc%5Etfw">#bash</a><a href="https://t.co/1A7TzwFIax">https://t.co/1A7TzwFIax</a> <a href="https://t.co/sy8fSk9pxu">pic.twitter.com/sy8fSk9pxu</a></p>&mdash; –ù—É –°–ª–∞–∞–∞–∞–≤–∞ (@swiftyfinch) <a href="https://twitter.com/swiftyfinch/status/1271808289504931842?ref_src=twsrc%5Etfw">June 13, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftyfinch.github.io/en/2020-05-19-json-encoding</guid><title>JSON Body Escaping</title><description>I think many iOS developers have worked with escaping **URL**. But can you instantly answer does **JSON** escapes when it sending to **body**? In my work, I faced the fact that by default the **JSON** **body** of the query is escaped when using the standard **JSONEncoder**. So you can ask what is wrong with this?</description><link>https://swiftyfinch.github.io/en/2020-05-19-json-encoding</link><pubDate>Tue, 19 May 2020 00:00:00 +0500</pubDate><content:encoded><![CDATA[<img src="https://swiftyfinch.github.io/posts/2020-05-19-json-encoding/macbook.jpg"/><p>I think many iOS developers have worked with escaping <strong>URL</strong>. But can you instantly answer does <strong>JSON</strong> escapes when it sending to <strong>body</strong>? In my work, I faced the fact that by default the <strong>JSON</strong> <strong>body</strong> of the query is escaped when using the standard <strong>JSONEncoder</strong>. So you can ask what is wrong with this?</p><h2 id="bug"><img class="reaction" src="https://swiftyfinch.github.io/reactions/bug.svg" alt="bug.svg" title="bug.svg"> <a href="#bug">The problem</a></h2><p>Just imagine that you send an address: <strong>Tram Lane 3/4</strong>. What did we get in <strong>body</strong>? This: <strong>Tram Lane 3&bsol;/4</strong>. And then an unhappy manager will decode this address manually (no one manager was affected during development).</p><h2 id="idea"><img class="reaction" src="https://swiftyfinch.github.io/reactions/idea.svg" alt="idea.svg" title="idea.svg"> <a href="#idea">Solution</a></h2><p>The good news is we can fix it easily! <strong>JSONEncoder</strong> has the <strong>withoutEscapingSlashes</strong> property.</p><p>The bad news is that only for <strong>iOS 13</strong>. Otherwise, you will have to do it manually. Here is a short example of what this might look like:</p><pre><code class="swift"><div class="line"><span class="keyword">struct</span> WithoutEscapingSlashesEncoder {</div><div class="line"></div><div class="line">    <span class="keyword">private enum</span> EncoderError: <span class="type">InternalError</span> {</div><div class="line">        <span class="keyword">case</span> dataToUTF8</div><div class="line">        <span class="keyword">case</span> utf8ToData</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">func</span> encode&lt;T: <span class="type">Encodable</span>&gt;(<span class="keyword">_</span> object: <span class="type">T</span>) <span class="keyword">throws</span> -&gt; <span class="type">Data</span> {</div><div class="line">        <span class="keyword">let</span> jsonEncoder = <span class="type">JSONEncoder</span>()</div><div class="line">        <span class="keyword">if #available</span>(iOS <span class="number">13</span>, *) {</div><div class="line">            jsonEncoder.<span class="property">outputFormatting</span> = .<span class="dotAccess">withoutEscapingSlashes</span></div><div class="line">            <span class="keyword">return try</span> jsonEncoder.<span class="call">encode</span>(object)</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">let</span> data = <span class="keyword">try</span> jsonEncoder.<span class="call">encode</span>(object)</div><div class="line">            <span class="keyword">guard let</span> string = <span class="type">String</span>(data: data, encoding: .<span class="dotAccess">utf8</span>)</div><div class="line">            <span class="keyword">else</span> { <span class="keyword">throw</span> <span class="type">EncoderError</span>.<span class="property">dataToUTF8</span> }</div><div class="line"></div><div class="line">            <span class="keyword">let</span> fixedString = string.<span class="call">replacingOccurrences</span>(of: <span class="string">"\\/"</span>, with: <span class="string">"/"</span>)</div><div class="line">            <span class="keyword">guard let</span> fixedData = fixedString.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)</div><div class="line">            <span class="keyword">else</span> { <span class="keyword">throw</span> <span class="type">EncoderError</span>.<span class="property">utf8ToData</span> }</div><div class="line">            <span class="keyword">return</span> fixedData</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></code></pre><p><br></p><p>üí¨ Please, leave some feedback in Twitter post:</p><blockquote class="twitter-tweet" data-lang="en" data-dnt="true"><p lang="en" dir="ltr"><img class="reaction" src="https://swiftyfinch.github.io/reactions/rocket.gif" alt="rocket.gif" title="rocket.gif"> Just translated a short post &quot;JSON Body Escaping&quot;<br><img class="reaction" src="https://swiftyfinch.github.io/reactions/party.png" alt="party.png" title="party.png"> Added support English language<a href="https://t.co/UwniqS6OVL">https://t.co/UwniqS6OVL</a><a href="https://twitter.com/hashtag/ios?src=hash&amp;ref_src=twsrc%5Etfw">#ios</a> <a href="https://twitter.com/hashtag/swift?src=hash&amp;ref_src=twsrc%5Etfw">#swift</a> <a href="https://t.co/2DMi9ZeSNl">pic.twitter.com/2DMi9ZeSNl</a></p>&mdash; –ù—É –°–ª–∞–∞–∞–∞–≤–∞ (@swiftyfinch) <a href="https://twitter.com/swiftyfinch/status/1271420336869965826?ref_src=twsrc%5Etfw">June 12, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded></item></channel></rss>